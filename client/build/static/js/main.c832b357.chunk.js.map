{"version":3,"sources":["utils/mutations.js","utils/auth.js","pages/Login.js","pages/NoMatch.js","utils/queries.js","components/ReactionList/index.js","components/ReactionForm/index.js","pages/SingleThought.js","components/ThoughtList/index.js","components/FriendList/index.js","components/ThoughtForm/index.js","pages/Profile.js","pages/Signup.js","components/Header/index.js","components/Footer/index.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","ADD_FRIEND","ADD_THOUGHT","ADD_REACTION","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Login","props","useState","email","password","formState","setFormState","useMutation","login","error","handleChange","event","target","name","value","handleFormSubmit","a","preventDefault","variables","data","Auth","console","className","onSubmit","placeholder","type","id","onChange","NoMatch","QUERY_THOUGHTS","QUERY_THOUGHT","QUERY_USER","QUERY_ME","QUERY_ME_BASIC","ReactionList","reactions","map","reaction","reactionBody","to","username","style","fontWeight","createdAt","_id","ReactionForm","thoughtId","setBody","characterCount","setCharacterCount","addReaction","length","SingleThought","useParams","useQuery","loading","thought","thoughtText","reactionCount","loggedIn","ThoughtList","thoughts","title","FriendList","friendCount","friends","friend","ThoughtForm","setText","update","cache","addThought","readQuery","query","writeQuery","e","me","Profile","addFriend","userParam","user","getProfile","handleClick","onClick","Signup","addUser","Header","href","logout","Footer","Home","userData","log","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c832b357.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_FRIEND = gql`\n  mutation addFriend($id: ID!) {\n    addFriend(friendId: $id) {\n      _id\n      username\n      friendCount\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_THOUGHT = gql`\n  mutation addThought($thoughtText: String!) {\n    addThought(thoughtText: $thoughtText) {\n      _id\n      thoughtText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_REACTION = gql`\n  mutation addReaction($thoughtId: ID!, $reactionBody: String!) {\n    addReaction(thoughtId: $thoughtId, reactionBody: $reactionBody) {\n      _id\n      reactionCount\n      reactions {\n        _id\n        reactionBody\n        createdAt\n        username\n      }\n    }\n  }\n`;","import decode from 'jwt-decode';\n\nclass AuthService {\n    // retrieve data saved in token\n    getProfile() {\n      return decode(this.getToken());\n    }\n  \n    // check if the user is still logged in\n    loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      const token = this.getToken();\n      // use type coersion to check if token is NOT undefined and the token is NOT expired\n      return !!token && !this.isTokenExpired(token);\n    }\n  \n    // check if the token has expired\n    isTokenExpired(token) {\n      try {\n        const decoded = decode(token);\n        if (decoded.exp < Date.now() / 1000) {\n          return true;\n        } else {\n          return false;\n        }\n      } catch (err) {\n        return false;\n      }\n    }\n  \n    // retrieve token from localStorage\n    getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem('id_token');\n    }\n  \n    // set token to localStorage and reload page to homepage\n    login(idToken) {\n      // Saves user token to localStorage\n      localStorage.setItem('id_token', idToken);\n  \n      window.location.assign('/');\n    }\n  \n    // clear token from localStorage and force logout with reload\n    logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem('id_token');\n      // this will reload the page and reset the state of the application\n      window.location.assign('/');\n    }\n  }\n\nexport default new AuthService();","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      const { data } = await login({\n        variables: { ...formState }\n      });\n    \n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <main className='flex-row justify-center mb-4'>\n      <div className='col-12 col-md-6'>\n        <div className='card'>\n          <h4 className='card-header'>Login</h4>\n          <div className='card-body'>\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className='form-input'\n                placeholder='Your email'\n                name='email'\n                type='email'\n                id='email'\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className='form-input'\n                placeholder='******'\n                name='password'\n                type='password'\n                id='password'\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className='btn d-block w-100' type='submit'>\n                Submit\n              </button>\n            </form>\n            {error && <div>Login failed</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Login;\n","import React from 'react';\n\nconst NoMatch = () => {\n  return (\n    <div>\n      Oops, we couldn't find that page.\n    </div>\n  );\n};\n\nexport default NoMatch;","import { gql } from '@apollo/client';\n\nexport const QUERY_THOUGHTS = gql`\n  query thoughts($username: String) {\n    thoughts(username: $username) {\n      _id\n      thoughtText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n        createdAt\n        username\n        reactionBody\n      }\n    }\n  }\n`;\n\nexport const QUERY_THOUGHT = gql`\n  query thought($id: ID!) {\n    thought(_id: $id) {\n      _id\n      thoughtText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n        createdAt\n        username\n        reactionBody\n      }\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  query user($username: String!) {\n    user(username: $username) {\n      _id\n      username\n      email\n      friendCount\n      friends {\n        _id\n        username\n      }\n      thoughts {\n        _id\n        thoughtText\n        createdAt\n        reactionCount\n      }\n    }\n  }\n`;\n\nexport const QUERY_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      friendCount\n      thoughts {\n        _id\n        thoughtText\n        createdAt\n        reactionCount\n        reactions {\n          _id\n          createdAt\n          reactionBody\n          username\n        }\n      }\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const QUERY_ME_BASIC = gql`\n  {\n    me {\n      _id\n      username\n      email\n      friendCount\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ReactionList = ({ reactions }) => {\n  return (\n    <div className=\"card mb-3\">\n        <div className=\"card-header\">\n            <span className=\"text-light\">Reactions</span>\n        </div>\n        <div className=\"card-body\">\n            {reactions &&\n            reactions.map(reaction => (\n                <p className=\"pill mb-3\" key={reaction._id}>\n                {reaction.reactionBody} {'// '}\n                <Link to={`/profile/${reaction.username}`} style={{ fontWeight: 700 }}>\n                    {reaction.username} on {reaction.createdAt}\n                </Link>\n                </p>\n            ))}\n        </div>\n    </div>\n  );\n};\n\nexport default ReactionList;","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_REACTION } from '../../utils/mutations';\n\nconst ReactionForm = ({ thoughtId }) => {\n\n    const [reactionBody, setBody] = useState('');\n    const [characterCount, setCharacterCount] = useState(0);\n    const [addReaction, { error }] = useMutation(ADD_REACTION);\n\n    const handleChange = event => {\n    if (event.target.value.length <= 280) {\n        setBody(event.target.value);\n        setCharacterCount(event.target.value.length);\n    }\n    };\n\n    const handleFormSubmit = async event => {\n        event.preventDefault();\n\n        try {\n            // add thought to database\n            await addReaction({\n            variables: { reactionBody, thoughtId }\n            });\n\n            // clear form value\n            setBody('');\n            setCharacterCount(0);\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n  return (\n    <div>\n      <p className={`m-0 ${characterCount === 280 || error ? 'text-error' : ''}`}>\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n      </p>\n      <form className=\"flex-row justify-center justify-space-between-md align-stretch\" onSubmit={handleFormSubmit}>\n        <textarea\n          placeholder=\"Leave a reaction to this thought...\"\n          className=\"form-input col-12 col-md-9\"\n          value={reactionBody}\n          onChange={handleChange}\n        ></textarea>\n\n        <button className=\"btn col-12 col-md-3\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ReactionForm;","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_THOUGHT } from '../utils/queries';\nimport ReactionList from '../components/ReactionList';\nimport Auth from '../utils/auth';\nimport ReactionForm from '../components/ReactionForm';\n\nconst SingleThought = props => {\n\n  const { id: thoughtId } = useParams();\n\n  const { loading, data } = useQuery(QUERY_THOUGHT, {\n    variables: { id: thoughtId }\n  });\n  \n  const thought = data?.thought || {};\n  \n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"card mb-3\">\n        <p className=\"card-header\">\n          <span style={{ fontWeight: 700 }} className=\"text-light\">\n            {thought.username}\n          </span>{' '}\n          thought on {thought.createdAt}\n        </p>\n        <div className=\"card-body\">\n          <p>{thought.thoughtText}</p>\n        </div>\n      </div>\n\n      {thought.reactionCount > 0 && <ReactionList reactions={thought.reactions} />}\n      {Auth.loggedIn() && <ReactionForm thoughtId={thought._id} />}\n    </div>\n  );\n};\n\nexport default SingleThought;\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ThoughtList = ({ thoughts, title }) => {\n  if (!thoughts.length) {\n    return <h3>No Thoughts Yet</h3>;\n  }\n\n  return (\n    <div>\n      <h3>{title}</h3>\n      {thoughts &&\n        thoughts.map(thought => (\n          <div key={thought._id} className=\"card mb-3\">\n            <p className=\"card-header\">\n              <Link\n                to={`/profile/${thought.username}`}\n                style={{ fontWeight: 700 }}\n                className=\"text-light\"\n              >\n                {thought.username}\n              </Link>{' '}\n              thought on {thought.createdAt}\n            </p>\n            <div className=\"card-body\">\n              <Link to={`/thought/${thought._id}`}>\n                <p>{thought.thoughtText}</p>\n                <p className=\"mb-0\">\n                  Reactions: {thought.reactionCount} || Click to{' '}\n                  {thought.reactionCount ? 'see' : 'start'} the discussion!\n                </p>\n              </Link>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ThoughtList;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst FriendList = ({ friendCount, username, friends }) => {\n  if (!friends || !friends.length) {\n    return <p className=\"bg-dark text-light p-3\">{username}, make some friends!</p>;\n  }\n\n  return (\n    <div>\n      <h5>\n        {username}'s {friendCount} {friendCount === 1 ? 'friend' : 'friends'}\n      </h5>\n      {friends.map(friend => (\n        <button className=\"btn w-100 display-block mb-2\" key={friend._id}>\n          <Link to={`/profile/${friend.username}`}>{friend.username}</Link>\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default FriendList;","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_THOUGHT } from '../../utils/mutations';\nimport { QUERY_THOUGHTS, QUERY_ME } from '../../utils/queries';\n\nconst ThoughtForm = () => {\n\n    const [thoughtText, setText] = useState('');\n    const [characterCount, setCharacterCount] = useState(0);\n    const [addThought, { error }] = useMutation(ADD_THOUGHT, {\n        update(cache, { data: { addThought } }) {\n          try {\n            // could potentially not exist yet, so wrap in a try...catch\n            const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\n            cache.writeQuery({\n              query: QUERY_THOUGHTS,\n              data: { thoughts: [addThought, ...thoughts] }\n            });\n          } catch (e) {\n            console.error(e);\n          }\n      \n          // update me object's cache, appending new thought to the end of the array\n          const { me } = cache.readQuery({ query: QUERY_ME });\n          cache.writeQuery({\n            query: QUERY_ME,\n            data: { me: { ...me, thoughts: [...me.thoughts, addThought] } }\n          });\n        }\n      });\n      \n\n    const handleChange = event => {\n        if (event.target.value.length <= 280) {\n          setText(event.target.value);\n          setCharacterCount(event.target.value.length);\n        }\n    };\n\n    const handleFormSubmit = async event => {\n        event.preventDefault();\n\n        try {\n            // add thought to database\n            await addThought({\n            variables: { thoughtText }\n            });\n\n            // clear form value\n            setText('');\n            setCharacterCount(0);\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n  return (\n    <div>\n      <p className={`m-0 ${characterCount === 280 || error ? 'text-error' : ''}`}>\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-stretch\"\n        onSubmit={handleFormSubmit}\n      >\n      <textarea\n        placeholder=\"Here's a new thought...\"\n        value={thoughtText}\n        className=\"form-input col-12 col-md-9\"\n        onChange={handleChange}\n      ></textarea>\n        <button className=\"btn col-12 col-md-3\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ThoughtForm;","import React from 'react';\nimport { Redirect, useParams } from 'react-router-dom';\n\nimport ThoughtList from '../components/ThoughtList';\n\nimport { useQuery, useMutation } from '@apollo/client';\n\nimport FriendList from '../components/FriendList';\n\nimport { QUERY_USER, QUERY_ME } from '../utils/queries';\n\nimport Auth from '../utils/auth';\n\nimport { ADD_FRIEND } from '../utils/mutations';\n\nimport ThoughtForm from '../components/ThoughtForm';\n\nconst Profile = () => {\n  const [addFriend] = useMutation(ADD_FRIEND);\n\n  const { username: userParam } = useParams();\n\n  const { loading, data } = useQuery(userParam ? QUERY_USER : QUERY_ME, {\n    variables: { username: userParam }\n  });\n\n  const user = data?.me || data?.user || {};\n\n  // redirect to personal profile page if username is the logged-in user's\n  if (Auth.loggedIn() && Auth.getProfile().data.username === userParam) {\n    return <Redirect to=\"/profile\" />;\n  }\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!user?.username) {\n    return (\n      <h4>\n        You need to be logged in to see this page. Use the navigation links above to sign up or log in!\n      </h4>\n    );\n  }\n\n  const handleClick = async () => {\n    try {\n      await addFriend({\n        variables: { id: user._id }\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"flex-row mb-3\">\n      <h2 className=\"bg-dark text-secondary p-3 display-inline-block\">\n        Viewing {userParam ? `${user.username}'s` : 'your'} profile.\n      </h2>\n\n      {userParam && (\n        <button className=\"btn ml-auto\" onClick={handleClick}>\n          Add Friend\n        </button>\n      )}\n      </div>\n\n      <div className=\"flex-row justify-space-between mb-3\">\n        <div className=\"col-12 mb-3 col-lg-8\">\n          <ThoughtList thoughts={user.thoughts} title={`${user.username}'s thoughts...`} />\n        </div>\n\n        <div className=\"col-12 col-lg-3 mb-3\">\n          <FriendList\n            username={user.username}\n            friendCount={user.friendCount}\n            friends={user.friends}\n          />\n        </div>\n      </div>\n      <div className=\"mb-3\">{!userParam && <ThoughtForm />}</div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst Signup = () => {\n  const [formState, setFormState] = useState({ username: '', email: '', password: '' });\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form (notice the async!)\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    // use try/catch instead of promises to handle errors\n    try {\n      const { data } = await addUser({\n        variables: { ...formState }\n      });\n    \n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <main className='flex-row justify-center mb-4'>\n      <div className='col-12 col-md-6'>\n        <div className='card'>\n          <h4 className='card-header'>Sign Up</h4>\n          <div className='card-body'>\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className='form-input'\n                placeholder='Your username'\n                name='username'\n                type='username'\n                id='username'\n                value={formState.username}\n                onChange={handleChange}\n              />\n              <input\n                className='form-input'\n                placeholder='Your email'\n                name='email'\n                type='email'\n                id='email'\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className='form-input'\n                placeholder='******'\n                name='password'\n                type='password'\n                id='password'\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className='btn d-block w-100' type='submit'>\n                Submit\n              </button>\n            </form>\n            {error && <div>Sign up failed</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Signup;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Auth from '../../utils/auth';\n\nconst Header = () => {\n\n  const logout = event => {\n    event.preventDefault();\n    Auth.logout();\n  };\n\n  return (\n    <header className=\"bg-secondary mb-4 py-2 flex-row align-center\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <Link to=\"/\">\n          <h1>Deep Thoughts</h1>\n        </Link>\n\n        <nav className=\"text-center\">\n          {Auth.loggedIn() ? (\n            <>\n              <Link to=\"/profile\">Me</Link>\n              <a href=\"/\" onClick={logout}>\n                Logout\n              </a>\n            </>\n          ) : (\n            <>\n              <Link to=\"/login\">Login</Link>\n              <Link to=\"/signup\">Signup</Link>\n            </>\n          )}\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"w-100 mt-auto bg-secondary p-4\">\n      <div className=\"container\">&copy;2021 by Noemie Grau</div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport ThoughtList from '../components/ThoughtList';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_THOUGHTS, QUERY_ME_BASIC } from '../utils/queries';\nimport Auth from '../utils/auth';\nimport FriendList from '../components/FriendList';\nimport ThoughtForm from '../components/ThoughtForm';\n\nconst Home = () => {\n  // use useQuery hook to make query request\n  const { loading, data } = useQuery(QUERY_THOUGHTS);\n  // use object destructuring to extract `data` from the `useQuery` Hook's response and rename it `userData` to be more descriptive\n  const { data: userData } = useQuery(QUERY_ME_BASIC);\n  const thoughts = data?.thoughts || [];\n  console.log(thoughts);\n\n  const loggedIn = Auth.loggedIn();\n\n  return (\n    <main>\n  <div className=\"flex-row justify-space-between\">\n    {loggedIn && (\n      <div className=\"col-12 mb-3\">\n        <ThoughtForm />\n      </div>\n    )}\n    <div className={`col-12 mb-3 ${loggedIn && 'col-lg-8'}`}>\n          {loading ? (\n            <div>Loading...</div>\n          ) : (\n            <ThoughtList thoughts={thoughts} title=\"Some Feed for Thought(s)...\" />\n          )}\n        </div>\n        {loggedIn && userData ? (\n        <div className=\"col-12 col-lg-3 mb-3\">\n          <FriendList\n            username={userData.me.username}\n            friendCount={userData.me.friendCount}\n            friends={userData.me.friends}\n          />\n        </div>\n      ) : null}\n      </div>\n</main>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport NoMatch from './pages/NoMatch';\nimport SingleThought from './pages/SingleThought';\nimport Profile from './pages/Profile';\nimport Signup from './pages/Signup';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nimport Home from './pages/Home';\n\nimport { setContext } from '@apollo/client/link/context';\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/profile/:username?\" component={Profile} />\n              <Route exact path=\"/thought/:id\" component={SingleThought} />\n\n              <Route component={NoMatch} />\n            </Switch>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}